---
title: "Interactive maps (R)"
date: "`r format(Sys.Date(), '%m %d, %Y')`"
format: 
  html:
    code-fold: true
    toc: true
    toc-depth: 3
    highlight-style: github
    embed-resources: false
execute: 
    echo: true
    warning: false
    cache: false
editor_options: 
  chunk_output_type: console
project:
  execute-dir: project
---

This document explores making interactive maps using R. There are a number of R packages that can be used to generate such visualizations. We consider just a small number (not exhaustively).

## Data

We use `gapminder` dataset from `{gapminder}` package. It is contains data from 187 countries covering the periods 1952 - 2007 with the following columns:

* **country**: Country name
* **continent**: Continental territory of a country
* **year**: 1952 - 2007
* **lifeExp**: Life expectancy in years
* **pop**: population size
* **gdpPercap**: GDP per capita in infaltion-adjusted dollars

The second dataset is the `meteorite landings` from [Tidytuesday project](https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-06-11) from the Meteoritical Society of NASA. It comes with the following variables:

* **name**: Meteorite name
* **mass**: Mass in grams
* **lat**: latitude
* **long**: longitude
* **fall**: fall or found meteorite





```{r}
pacman::p_load(
    leaflet
    ,gapminder
    ,echarts4r
    ,tidyverse
    ,ggiraph
    ,widgetframe
    ,ggthemes
    ,plotly
    ,viridis
    ,DT
)
```

First we organize the  datasets:

```{r}
# 1. gapminder

# country codes
codes <- gapminder::country_codes
# countries with info unfiltered version
gapminder <- gapminder::gapminder_unfiltered
# join
gapminder <- gapminder %>% left_join(codes) %>%
  mutate(code = iso_alpha)
# a map of the world - Antarctica removed
world <- map_data("world") %>%
  filter(!grepl("antarctica", region, ignore.case = T))
gapminder_df <- gapminder %>%
  inner_join(maps::iso3166 %>% 
  select(a3, mapname), by = c(code = "a3")
  ) %>%
    mutate(
      mapname = str_remove(mapname, "\\(.*")
    )

```

Gapminder dataset:


```{r}
datatable(gapminder_df)
```


```{r}
meteorites <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv")
```

Meteorite dataset:


```{r}
datatable(meteorites)
```

## Interactive choropleth map with `{ggiraph}`

To turn a static choropleth map by invoking a tooltip when we hover the pointer over a country, we can use `{ggiraph}` - `geom_polygon_interactive()` & `girafe` and `{widgetframe}` - `framewidget()` packages.

It is useful creating a reusable theming function:

```{r}
theme_helper <- function(){
   theme(
    axis.line = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    plot.background = element_rect(fill = "snow", color = NA),
    panel.background = element_rect(fill= "snow", color = NA),
    plot.title = element_text(size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1),
    legend.title = element_text(color = "grey40", size = 8),
    legend.text = element_text(color = "grey40", size = 7, hjust = 0),
    legend.position = c(0.05, 0.25),
    plot.margin = unit(c(0.5,2,0.5,1), "cm")) 
}
```

```{r}
life_exp_map <- gapminder_df %>%
  filter(year == 2007) %>%
  right_join(world, by = c(mapname = "region")) %>%
  ggplot() +
  geom_polygon_interactive(
    color = "white", size = 0.01, 
    aes(long, lat, group = group, fill = lifeExp,
    tooltip = sprintf("%s<br/>%s", country, lifeExp))
  ) +
    theme_void() + 
    scale_fill_viridis(option = "B") +
    labs(
      title = "Life Expectancy",
      subtitle = "Year: 2007",
      caption = "Source: gapminder.org",
      fill = "Years"
    ) 

life_exp_map <- life_exp_map + theme_helper() + coord_fixed(ratio = 1.3)
```
Print it interactively


```{r}
#| output: asis
widgetframe::frameWidget(girafe(code = print(life_exp_map)))
```

## Interactive choropleth maps with `{plotly}`

`{plotly}` on top of tooltips also allows zooming, lasso/box selections or downloading the map as .png.


```{r}
#| output: asis
life_exp07 <- gapminder_df %>%
  filter(year == 2007) %>% 
  select(mapname, code, lifeExp)

p_07 <- plot_geo(life_exp07)

p_07 <- p_07 %>% add_trace(
  z = ~lifeExp, color = ~ lifeExp, colors = 'Oranges',
  text = ~mapname, locations = ~ code
) %>% colorbar(title = "Years")

p_07 <- p_07 %>%
  layout(
    title = 'Life Expectancy in 2007 <br>Source:<a href= "https://www.gapminder.org"> gapminder.org</a>', geo = p_07
  )

p_07
```

## Interactive points using `{plotly}`


```{r}
meteorites_fell <- meteorites %>%
  filter(fall == "Fell")

meteorites_map <- list(
  #scope = 'usa',
  projection = list(type = 'Mercator'),
  showland = TRUE,
  landcolor = toRGB("grey80")
)


meteo_map <- plot_geo(meteorites_fell, lat = ~lat, lon = ~long)
meteo_map <- meteo_map %>% add_markers(
  text = ~paste(paste("Name:", name), 
                paste("Year:", year), 
                paste("Mass:", mass), sep = "<br />"),
  color = ~mass, symbol = I("circle-dot"), size = I(8), hoverinfo = "text"
)
meteo_map <- meteo_map %>% colorbar(title = "Mass")
meteo_map <- meteo_map %>% layout(
  title = 'Meteorite Landings<br />(Meteorite falls)', geo = meteorites_map
)

meteo_map
```

## interactive maps with `{echarts4r}`


```{r}
df <- gapminder %>% 
    mutate(Name = recode_factor(country,
                              `Congo, Dem. Rep.`= "Dem. Rep. Congo",
                              `Congo, Rep.`= "Congo",
                              `Cote d'Ivoire`= "CÃ´te d'Ivoire",
                              `Central African Republic`= "Central African Rep.",
                              `Yemen, Rep.`= "Yemen",
                              `Korea, Rep.`= "Korea",
                              `Korea, Dem. Rep.`= "Dem. Rep. Korea",
                              `Czech Republic`= "Czech Rep.",
                              `Slovak Republic`= "Slovakia",
                              `Dominican Republic`= "Dominican Rep.",
                              `Equatorial Guinea`= "Eq. Guinea"))

df %>% group_by(year) %>%
  e_chart(Name, timeline = TRUE) %>%
  e_map(lifeExp) %>%
  e_visual_map(
    min = 30, max = 90, type = "piecewise"
  ) %>%
    e_title("Life expectancy by country and year", left = "center") %>%
    e_tooltip(
      trigger = "item", formatter = e_tooltip_choro_formatter()
    )
```